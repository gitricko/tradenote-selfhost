name: Test
# This workflow tests the TradeNote server by starting it up, checking if it is running,
# creating a user, and performing backup and restore operations.  
# It runs on every pull request and push to the main branch.


on:
  pull_request:
  push:
    branches:
      - main

  # schedule:
  #   - cron: '55 23 * * 5' # Runs at 23:55 every Friday

permissions:
  contents: read

jobs:
  tn-test:
    runs-on: ubuntu-latest
    steps:

      - name: Install Docker Compose v2
        run: |
          mkdir -p ~/.docker/cli-plugins
          curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 \
            -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          docker compose version

      - name: Checkout
        uses: actions/checkout@v4

      - name: Test TN Server is starting
        run: |
          ( make start ) & 
          # Wait for the server to start
          echo "Waiting for TradeNote server to start..."
          
          # Wait for the server to be up and running
          while ! curl -s --head http://localhost:8080 | head -n 1 | grep -q "200 OK"; do echo; sleep 5; done;
          for i in {1..10}; do
            if curl -s --head http://localhost:8080 | head -n 1 | grep -q "200 OK"; then
              echo "Server is up!"
              exit 0
            else
              echo "Waiting for server... ($i/10)"
              sleep 5
            fi
          done

          if ! curl -s --head http://localhost:8080 | head -n 1 | grep -q "200 OK"; then
            echo "Server is not up!"
            exit 1
          fi

      - name: Test create user in TN
        run: |
          make create-user
          make create-user && echo "✅ User created successfully" || { echo "❌ User creation failed"; exit 1; }

      - name: Test backup
        run: |
          # Create extra users for restore test later
          curl 'http://localhost:8080/parse/users' -H 'content-type: text/json' --data-raw '{"username":"$(TN_USER)123","password":"$(TN_USER)123","email":"$(TN_USER)123","timeZone":"America/New_York","_ApplicationId":"123456","_ClientVersion":"js5.3.0"}'

          ( make backup ) 2>/dev/null

          # Wait for the server to start after backup
          echo "Waiting for TradeNote server to start..."
          
          # Wait for the server to be up and running
          while ! curl -s --head http://localhost:8080 | head -n 1 | grep -q "200 OK"; do echo; sleep 5; done;
          for i in {1..10}; do
            if curl -s --head http://localhost:8080 | head -n 1 | grep -q "200 OK"; then
              echo "Server is up!"
              exit 0
            else
              echo "Waiting for server... ($i/10)"
              sleep 5
            fi
          done

          if ! curl -s --head http://localhost:8080 | head -n 1 | grep -q "200 OK"; then
            echo "Server is not up! ❌ Backup failed"
            exit 1
          else
            echo "✅ Backup successful"
          fi

      - name: Test restore
        run: |
          make docker-image-clean
          ( make start ) &
          # Wait for the server to start before restore
          echo "Waiting for TradeNote server to start..."
          
          # Wait for the server to be up and running
          while ! curl -s --head http://localhost:8080 | head -n 1 | grep -q "200 OK"; do echo; sleep 5; done;
          for i in {1..10}; do
            if curl -s --head http://localhost:8080 | head -n 1 | grep -q "200 OK"; then
              echo "Server is up!"
              exit 0
            else
              echo "Waiting for server... ($i/10)"
              sleep 5
            fi
          done

          ( make restore ) 2>/dev/null
          # Wait for the server to start after restore
          echo "Waiting for TradeNote server to start..."
          
          # Wait for the server to be up and running
          while ! curl -s --head http://localhost:8080 | head -n 1 | grep -q "200 OK"; do echo; sleep 5; done;
          for i in {1..10}; do
            if curl -s --head http://localhost:8080 | head -n 1 | grep -q "200 OK"; then
              echo "Server is up!"
              exit 0
            else
              echo "Waiting for server... ($i/10)"
              sleep 5
            fi
          done

          curl 'http://localhost:8080/parse/users' -H 'content-type: text/json' --data-raw '{"username":"$(TN_USER)123","password":"$(TN_USER)123","email":"$(TN_USER)123","timeZone":"America/New_York","_ApplicationId":"123456","_ClientVersion":"js5.3.0"}'
          echo $? && echo "✅ Restore successful" || { echo "❌ Restore failed"; exit 1; }

      - name: Test update src deps
        run: |
          # Create a file that is not support to be deleted
          touch ./file-should-be-here

          # Delete a file that should be restored/update
          rm -f ./LICENSE

          ls -lah
          make update-src-deps

          # Check if LICENSE is restore
          test -f ./LICENSE && echo "✅ LICENSE file is restored successfully" || { echo "❌ LICENSE file is missing"; exit 1; }

          # Check if file-should-be-here is still there (file add should not be removed)
          test -f ./file-should-be-here && echo "✅ file-should-be-here file is still here, not deleted" || { echo "❌ file-should-be-here file is missing"; exit 1; }


